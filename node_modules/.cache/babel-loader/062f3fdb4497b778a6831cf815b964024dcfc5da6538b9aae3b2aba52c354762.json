{"ast":null,"code":"// src/services/firebaseservices.js\nimport { database } from '../config/firebase';\nimport { ref, set, onValue, push, update, remove } from 'firebase/database';\n\n// ========== SERVICIOS PARA VEHÍCULOS ==========\n\nexport const vehiculosService = {\n  // Escuchar cambios en tiempo real de vehículos\n  subscribeToVehiculos: callback => {\n    const vehiculosRef = ref(database, 'vehiculos');\n    const unsubscribe = onValue(vehiculosRef, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const vehiculosArray = Object.entries(data).map(([id, vehiculo]) => ({\n          id,\n          ...vehiculo\n        }));\n        callback(vehiculosArray);\n      } else {\n        callback([]);\n      }\n    });\n    return unsubscribe;\n  },\n  // Actualizar posición de vehículo\n  updateVehiculoPosition: async (vehiculoId, position) => {\n    const vehiculoRef = ref(database, `vehiculos/${vehiculoId}`);\n    await update(vehiculoRef, {\n      lat: position.lat,\n      lng: position.lng,\n      ultimaActualizacion: new Date().toISOString()\n    });\n  },\n  // Actualizar estado de vehículo\n  updateVehiculoEstado: async (vehiculoId, estado, additionalData = {}) => {\n    const vehiculoRef = ref(database, `vehiculos/${vehiculoId}`);\n    await update(vehiculoRef, {\n      estado,\n      ...additionalData,\n      ultimaActualizacion: new Date().toISOString()\n    });\n  },\n  // Crear nuevo vehículo\n  createVehiculo: async vehiculoData => {\n    const vehiculosRef = ref(database, 'vehiculos');\n    const newVehiculoRef = push(vehiculosRef);\n    await set(newVehiculoRef, {\n      ...vehiculoData,\n      createdAt: new Date().toISOString()\n    });\n    return newVehiculoRef.key;\n  }\n};\n\n// ========== SERVICIOS PARA ZONAS ==========\n\nexport const zonasService = {\n  // Escuchar cambios en tiempo real de zonas\n  subscribeToZonas: callback => {\n    const zonasRef = ref(database, 'zonas');\n    const unsubscribe = onValue(zonasRef, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const zonasArray = Object.entries(data).map(([id, zona]) => ({\n          id,\n          ...zona\n        }));\n        callback(zonasArray);\n      } else {\n        callback([]);\n      }\n    });\n    return unsubscribe;\n  },\n  // Actualizar progreso de zona\n  updateZonaProgreso: async (zonaId, progreso) => {\n    const zonaRef = ref(database, `zonas/${zonaId}`);\n    await update(zonaRef, {\n      progreso,\n      estado: progreso === 100 ? 'completada' : 'activa',\n      ultimaActualizacion: new Date().toISOString()\n    });\n  },\n  // Crear nueva zona\n  createZona: async zonaData => {\n    const zonasRef = ref(database, 'zonas');\n    const newZonaRef = push(zonasRef);\n    await set(newZonaRef, {\n      ...zonaData,\n      createdAt: new Date().toISOString()\n    });\n    return newZonaRef.key;\n  }\n};\n\n// ========== SERVICIOS PARA TRABAJADORES ==========\n\nexport const trabajadoresService = {\n  // Escuchar cambios en tiempo real de trabajadores\n  subscribeToTrabajadores: callback => {\n    const trabajadoresRef = ref(database, 'trabajadores');\n    const unsubscribe = onValue(trabajadoresRef, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const trabajadoresArray = Object.entries(data).map(([id, trabajador]) => ({\n          id,\n          ...trabajador\n        }));\n        callback(trabajadoresArray);\n      } else {\n        callback([]);\n      }\n    });\n    return unsubscribe;\n  },\n  // Actualizar ubicación GPS del trabajador\n  updateTrabajadorLocation: async (trabajadorId, location) => {\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}/ubicacion`);\n    await set(trabajadorRef, {\n      lat: location.lat,\n      lng: location.lng,\n      timestamp: new Date().toISOString()\n    });\n  },\n  // Iniciar recorrido\n  startRecorrido: async (trabajadorId, zonaData) => {\n    const recorridoRef = ref(database, `recorridos/${trabajadorId}_${Date.now()}`);\n    const recorridoData = {\n      trabajadorId,\n      zonaId: zonaData.id,\n      zonaNombre: zonaData.nombre,\n      zonaLat: zonaData.lat,\n      zonaLng: zonaData.lng,\n      horaInicio: new Date().toISOString(),\n      estado: 'en_camino'\n    };\n    await set(recorridoRef, recorridoData);\n\n    // Actualizar estado del trabajador\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\n    await update(trabajadorRef, {\n      estado: 'en_camino',\n      zonaDestino: zonaData.nombre,\n      recorridoActual: recorridoRef.key\n    });\n    return recorridoRef.key;\n  },\n  // Marcar llegada a zona\n  markArrival: async (recorridoId, trabajadorId) => {\n    const recorridoRef = ref(database, `recorridos/${recorridoId}`);\n    await update(recorridoRef, {\n      horaLlegada: new Date().toISOString(),\n      estado: 'trabajando'\n    });\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\n    await update(trabajadorRef, {\n      estado: 'trabajando'\n    });\n  },\n  // Finalizar trabajo\n  finishWork: async (recorridoId, trabajadorId) => {\n    const recorridoRef = ref(database, `recorridos/${recorridoId}`);\n    await update(recorridoRef, {\n      horaFin: new Date().toISOString(),\n      estado: 'completado'\n    });\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\n    await update(trabajadorRef, {\n      estado: 'disponible',\n      zonaDestino: null,\n      recorridoActual: null\n    });\n  },\n  // Obtener historial de recorridos\n  getRecorridosHistory: (trabajadorId, callback) => {\n    const recorridosRef = ref(database, 'recorridos');\n    const unsubscribe = onValue(recorridosRef, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const recorridos = Object.entries(data).filter(([id, recorrido]) => recorrido.trabajadorId === trabajadorId).map(([id, recorrido]) => ({\n          id,\n          ...recorrido\n        })).sort((a, b) => new Date(b.horaInicio) - new Date(a.horaInicio));\n        callback(recorridos);\n      } else {\n        callback([]);\n      }\n    });\n    return unsubscribe;\n  }\n};\n\n// ========== SERVICIOS DE NOTIFICACIONES ==========\n\nexport const notificacionesService = {\n  // Enviar notificación\n  sendNotification: async notificationData => {\n    const notificacionesRef = ref(database, 'notificaciones');\n    const newNotifRef = push(notificacionesRef);\n    await set(newNotifRef, {\n      ...notificationData,\n      timestamp: new Date().toISOString(),\n      leido: false\n    });\n    return newNotifRef.key;\n  },\n  // Escuchar notificaciones para un usuario\n  subscribeToNotifications: (userId, callback) => {\n    const notificacionesRef = ref(database, 'notificaciones');\n    const unsubscribe = onValue(notificacionesRef, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const notificaciones = Object.entries(data).filter(([id, notif]) => notif.destinatario === userId).map(([id, notif]) => ({\n          id,\n          ...notif\n        })).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n        callback(notificaciones);\n      } else {\n        callback([]);\n      }\n    });\n    return unsubscribe;\n  },\n  // Marcar notificación como leída\n  markAsRead: async notificationId => {\n    const notifRef = ref(database, `notificaciones/${notificationId}`);\n    await update(notifRef, {\n      leido: true\n    });\n  }\n};\n\n// ========== SERVICIOS DE REPORTES ==========\n\nexport const reportesService = {\n  // Guardar reporte diario\n  saveDailyReport: async reportData => {\n    const fecha = new Date().toISOString().split('T')[0];\n    const reportRef = ref(database, `reportes/diarios/${fecha}`);\n    await set(reportRef, {\n      ...reportData,\n      fecha,\n      timestamp: new Date().toISOString()\n    });\n  },\n  // Obtener estadísticas en tiempo real\n  getRealtimeStats: callback => {\n    const refs = {\n      vehiculos: ref(database, 'vehiculos'),\n      zonas: ref(database, 'zonas'),\n      trabajadores: ref(database, 'trabajadores')\n    };\n    const stats = {\n      vehiculos: {\n        total: 0,\n        activos: 0,\n        enMantenimiento: 0\n      },\n      zonas: {\n        total: 0,\n        activas: 0,\n        completadas: 0\n      },\n      trabajadores: {\n        total: 0,\n        enRuta: 0,\n        trabajando: 0\n      }\n    };\n\n    // Escuchar vehículos\n    onValue(refs.vehiculos, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const vehiculos = Object.values(data);\n        stats.vehiculos.total = vehiculos.length;\n        stats.vehiculos.activos = vehiculos.filter(v => v.estado === 'activo' || v.estado === 'en_ruta').length;\n        stats.vehiculos.enMantenimiento = vehiculos.filter(v => v.estado === 'mantenimiento').length;\n      }\n      callback(stats);\n    });\n\n    // Escuchar zonas\n    onValue(refs.zonas, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const zonas = Object.values(data);\n        stats.zonas.total = zonas.length;\n        stats.zonas.activas = zonas.filter(z => z.estado === 'activa').length;\n        stats.zonas.completadas = zonas.filter(z => z.estado === 'completada').length;\n      }\n      callback(stats);\n    });\n\n    // Escuchar trabajadores\n    onValue(refs.trabajadores, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const trabajadores = Object.values(data);\n        stats.trabajadores.total = trabajadores.length;\n        stats.trabajadores.enRuta = trabajadores.filter(t => t.estado === 'en_camino').length;\n        stats.trabajadores.trabajando = trabajadores.filter(t => t.estado === 'trabajando').length;\n      }\n      callback(stats);\n    });\n  }\n};","map":{"version":3,"names":["database","ref","set","onValue","push","update","remove","vehiculosService","subscribeToVehiculos","callback","vehiculosRef","unsubscribe","snapshot","data","val","vehiculosArray","Object","entries","map","id","vehiculo","updateVehiculoPosition","vehiculoId","position","vehiculoRef","lat","lng","ultimaActualizacion","Date","toISOString","updateVehiculoEstado","estado","additionalData","createVehiculo","vehiculoData","newVehiculoRef","createdAt","key","zonasService","subscribeToZonas","zonasRef","zonasArray","zona","updateZonaProgreso","zonaId","progreso","zonaRef","createZona","zonaData","newZonaRef","trabajadoresService","subscribeToTrabajadores","trabajadoresRef","trabajadoresArray","trabajador","updateTrabajadorLocation","trabajadorId","location","trabajadorRef","timestamp","startRecorrido","recorridoRef","now","recorridoData","zonaNombre","nombre","zonaLat","zonaLng","horaInicio","zonaDestino","recorridoActual","markArrival","recorridoId","horaLlegada","finishWork","horaFin","getRecorridosHistory","recorridosRef","recorridos","filter","recorrido","sort","a","b","notificacionesService","sendNotification","notificationData","notificacionesRef","newNotifRef","leido","subscribeToNotifications","userId","notificaciones","notif","destinatario","markAsRead","notificationId","notifRef","reportesService","saveDailyReport","reportData","fecha","split","reportRef","getRealtimeStats","refs","vehiculos","zonas","trabajadores","stats","total","activos","enMantenimiento","activas","completadas","enRuta","trabajando","values","length","v","z","t"],"sources":["C:/Users/Izan/Desktop/AppReact/mapa-quillon/src/services/firebaseservices.js"],"sourcesContent":["// src/services/firebaseservices.js\r\nimport { database } from '../config/firebase';\r\nimport { ref, set, onValue, push, update, remove } from 'firebase/database';\r\n\r\n// ========== SERVICIOS PARA VEHÍCULOS ==========\r\n\r\nexport const vehiculosService = {\r\n  // Escuchar cambios en tiempo real de vehículos\r\n  subscribeToVehiculos: (callback) => {\r\n    const vehiculosRef = ref(database, 'vehiculos');\r\n    const unsubscribe = onValue(vehiculosRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const vehiculosArray = Object.entries(data).map(([id, vehiculo]) => ({\r\n          id,\r\n          ...vehiculo\r\n        }));\r\n        callback(vehiculosArray);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Actualizar posición de vehículo\r\n  updateVehiculoPosition: async (vehiculoId, position) => {\r\n    const vehiculoRef = ref(database, `vehiculos/${vehiculoId}`);\r\n    await update(vehiculoRef, {\r\n      lat: position.lat,\r\n      lng: position.lng,\r\n      ultimaActualizacion: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Actualizar estado de vehículo\r\n  updateVehiculoEstado: async (vehiculoId, estado, additionalData = {}) => {\r\n    const vehiculoRef = ref(database, `vehiculos/${vehiculoId}`);\r\n    await update(vehiculoRef, {\r\n      estado,\r\n      ...additionalData,\r\n      ultimaActualizacion: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Crear nuevo vehículo\r\n  createVehiculo: async (vehiculoData) => {\r\n    const vehiculosRef = ref(database, 'vehiculos');\r\n    const newVehiculoRef = push(vehiculosRef);\r\n    await set(newVehiculoRef, {\r\n      ...vehiculoData,\r\n      createdAt: new Date().toISOString()\r\n    });\r\n    return newVehiculoRef.key;\r\n  }\r\n};\r\n\r\n// ========== SERVICIOS PARA ZONAS ==========\r\n\r\nexport const zonasService = {\r\n  // Escuchar cambios en tiempo real de zonas\r\n  subscribeToZonas: (callback) => {\r\n    const zonasRef = ref(database, 'zonas');\r\n    const unsubscribe = onValue(zonasRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const zonasArray = Object.entries(data).map(([id, zona]) => ({\r\n          id,\r\n          ...zona\r\n        }));\r\n        callback(zonasArray);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Actualizar progreso de zona\r\n  updateZonaProgreso: async (zonaId, progreso) => {\r\n    const zonaRef = ref(database, `zonas/${zonaId}`);\r\n    await update(zonaRef, {\r\n      progreso,\r\n      estado: progreso === 100 ? 'completada' : 'activa',\r\n      ultimaActualizacion: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Crear nueva zona\r\n  createZona: async (zonaData) => {\r\n    const zonasRef = ref(database, 'zonas');\r\n    const newZonaRef = push(zonasRef);\r\n    await set(newZonaRef, {\r\n      ...zonaData,\r\n      createdAt: new Date().toISOString()\r\n    });\r\n    return newZonaRef.key;\r\n  }\r\n};\r\n\r\n// ========== SERVICIOS PARA TRABAJADORES ==========\r\n\r\nexport const trabajadoresService = {\r\n  // Escuchar cambios en tiempo real de trabajadores\r\n  subscribeToTrabajadores: (callback) => {\r\n    const trabajadoresRef = ref(database, 'trabajadores');\r\n    const unsubscribe = onValue(trabajadoresRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const trabajadoresArray = Object.entries(data).map(([id, trabajador]) => ({\r\n          id,\r\n          ...trabajador\r\n        }));\r\n        callback(trabajadoresArray);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Actualizar ubicación GPS del trabajador\r\n  updateTrabajadorLocation: async (trabajadorId, location) => {\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}/ubicacion`);\r\n    await set(trabajadorRef, {\r\n      lat: location.lat,\r\n      lng: location.lng,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Iniciar recorrido\r\n  startRecorrido: async (trabajadorId, zonaData) => {\r\n    const recorridoRef = ref(database, `recorridos/${trabajadorId}_${Date.now()}`);\r\n    const recorridoData = {\r\n      trabajadorId,\r\n      zonaId: zonaData.id,\r\n      zonaNombre: zonaData.nombre,\r\n      zonaLat: zonaData.lat,\r\n      zonaLng: zonaData.lng,\r\n      horaInicio: new Date().toISOString(),\r\n      estado: 'en_camino'\r\n    };\r\n    \r\n    await set(recorridoRef, recorridoData);\r\n    \r\n    // Actualizar estado del trabajador\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\r\n    await update(trabajadorRef, {\r\n      estado: 'en_camino',\r\n      zonaDestino: zonaData.nombre,\r\n      recorridoActual: recorridoRef.key\r\n    });\r\n    \r\n    return recorridoRef.key;\r\n  },\r\n\r\n  // Marcar llegada a zona\r\n  markArrival: async (recorridoId, trabajadorId) => {\r\n    const recorridoRef = ref(database, `recorridos/${recorridoId}`);\r\n    await update(recorridoRef, {\r\n      horaLlegada: new Date().toISOString(),\r\n      estado: 'trabajando'\r\n    });\r\n\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\r\n    await update(trabajadorRef, {\r\n      estado: 'trabajando'\r\n    });\r\n  },\r\n\r\n  // Finalizar trabajo\r\n  finishWork: async (recorridoId, trabajadorId) => {\r\n    const recorridoRef = ref(database, `recorridos/${recorridoId}`);\r\n    await update(recorridoRef, {\r\n      horaFin: new Date().toISOString(),\r\n      estado: 'completado'\r\n    });\r\n\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\r\n    await update(trabajadorRef, {\r\n      estado: 'disponible',\r\n      zonaDestino: null,\r\n      recorridoActual: null\r\n    });\r\n  },\r\n\r\n  // Obtener historial de recorridos\r\n  getRecorridosHistory: (trabajadorId, callback) => {\r\n    const recorridosRef = ref(database, 'recorridos');\r\n    const unsubscribe = onValue(recorridosRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const recorridos = Object.entries(data)\r\n          .filter(([id, recorrido]) => recorrido.trabajadorId === trabajadorId)\r\n          .map(([id, recorrido]) => ({ id, ...recorrido }))\r\n          .sort((a, b) => new Date(b.horaInicio) - new Date(a.horaInicio));\r\n        callback(recorridos);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  }\r\n};\r\n\r\n// ========== SERVICIOS DE NOTIFICACIONES ==========\r\n\r\nexport const notificacionesService = {\r\n  // Enviar notificación\r\n  sendNotification: async (notificationData) => {\r\n    const notificacionesRef = ref(database, 'notificaciones');\r\n    const newNotifRef = push(notificacionesRef);\r\n    await set(newNotifRef, {\r\n      ...notificationData,\r\n      timestamp: new Date().toISOString(),\r\n      leido: false\r\n    });\r\n    return newNotifRef.key;\r\n  },\r\n\r\n  // Escuchar notificaciones para un usuario\r\n  subscribeToNotifications: (userId, callback) => {\r\n    const notificacionesRef = ref(database, 'notificaciones');\r\n    const unsubscribe = onValue(notificacionesRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const notificaciones = Object.entries(data)\r\n          .filter(([id, notif]) => notif.destinatario === userId)\r\n          .map(([id, notif]) => ({ id, ...notif }))\r\n          .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n        callback(notificaciones);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Marcar notificación como leída\r\n  markAsRead: async (notificationId) => {\r\n    const notifRef = ref(database, `notificaciones/${notificationId}`);\r\n    await update(notifRef, { leido: true });\r\n  }\r\n};\r\n\r\n// ========== SERVICIOS DE REPORTES ==========\r\n\r\nexport const reportesService = {\r\n  // Guardar reporte diario\r\n  saveDailyReport: async (reportData) => {\r\n    const fecha = new Date().toISOString().split('T')[0];\r\n    const reportRef = ref(database, `reportes/diarios/${fecha}`);\r\n    await set(reportRef, {\r\n      ...reportData,\r\n      fecha,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Obtener estadísticas en tiempo real\r\n  getRealtimeStats: (callback) => {\r\n    const refs = {\r\n      vehiculos: ref(database, 'vehiculos'),\r\n      zonas: ref(database, 'zonas'),\r\n      trabajadores: ref(database, 'trabajadores')\r\n    };\r\n\r\n    const stats = {\r\n      vehiculos: { total: 0, activos: 0, enMantenimiento: 0 },\r\n      zonas: { total: 0, activas: 0, completadas: 0 },\r\n      trabajadores: { total: 0, enRuta: 0, trabajando: 0 }\r\n    };\r\n\r\n    // Escuchar vehículos\r\n    onValue(refs.vehiculos, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const vehiculos = Object.values(data);\r\n        stats.vehiculos.total = vehiculos.length;\r\n        stats.vehiculos.activos = vehiculos.filter(v => v.estado === 'activo' || v.estado === 'en_ruta').length;\r\n        stats.vehiculos.enMantenimiento = vehiculos.filter(v => v.estado === 'mantenimiento').length;\r\n      }\r\n      callback(stats);\r\n    });\r\n\r\n    // Escuchar zonas\r\n    onValue(refs.zonas, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const zonas = Object.values(data);\r\n        stats.zonas.total = zonas.length;\r\n        stats.zonas.activas = zonas.filter(z => z.estado === 'activa').length;\r\n        stats.zonas.completadas = zonas.filter(z => z.estado === 'completada').length;\r\n      }\r\n      callback(stats);\r\n    });\r\n\r\n    // Escuchar trabajadores\r\n    onValue(refs.trabajadores, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const trabajadores = Object.values(data);\r\n        stats.trabajadores.total = trabajadores.length;\r\n        stats.trabajadores.enRuta = trabajadores.filter(t => t.estado === 'en_camino').length;\r\n        stats.trabajadores.trabajando = trabajadores.filter(t => t.estado === 'trabajando').length;\r\n      }\r\n      callback(stats);\r\n    });\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}