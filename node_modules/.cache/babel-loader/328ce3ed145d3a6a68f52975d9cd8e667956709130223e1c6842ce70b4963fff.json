{"ast":null,"code":"// src/services/firebaseservices.js\nimport{database}from'../config/firebase';import{ref,set,get,onValue,push,update,remove}from'firebase/database';// ========== SERVICIOS PARA VEHÍCULOS ==========\nexport const vehiculosService={// Escuchar cambios en tiempo real de vehículos\nsubscribeToVehiculos:callback=>{const vehiculosRef=ref(database,'vehiculos');const unsubscribe=onValue(vehiculosRef,snapshot=>{const data=snapshot.val();if(data){const vehiculosArray=Object.entries(data).map(_ref=>{let[id,vehiculo]=_ref;return{id,...vehiculo};});callback(vehiculosArray);}else{callback([]);}});return unsubscribe;},// Actualizar posición de vehículo\nupdateVehiculoPosition:async(vehiculoId,position)=>{const vehiculoRef=ref(database,`vehiculos/${vehiculoId}`);await update(vehiculoRef,{lat:position.lat,lng:position.lng,ultimaActualizacion:new Date().toISOString()});},// Actualizar estado de vehículo\nupdateVehiculoEstado:async function(vehiculoId,estado){let additionalData=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const vehiculoRef=ref(database,`vehiculos/${vehiculoId}`);await update(vehiculoRef,{estado,...additionalData,ultimaActualizacion:new Date().toISOString()});},// Crear nuevo vehículo\ncreateVehiculo:async vehiculoData=>{const vehiculosRef=ref(database,'vehiculos');const newVehiculoRef=push(vehiculosRef);await set(newVehiculoRef,{...vehiculoData,createdAt:new Date().toISOString()});return newVehiculoRef.key;}};// ========== SERVICIOS PARA ZONAS ==========\nexport const zonasService={// Escuchar cambios en tiempo real de zonas\nsubscribeToZonas:callback=>{const zonasRef=ref(database,'zonas');const unsubscribe=onValue(zonasRef,snapshot=>{const data=snapshot.val();if(data){const zonasArray=Object.entries(data).map(_ref2=>{let[id,zona]=_ref2;return{id,...zona};});callback(zonasArray);}else{callback([]);}});return unsubscribe;},// Actualizar progreso de zona\nupdateZonaProgreso:async(zonaId,progreso)=>{const zonaRef=ref(database,`zonas/${zonaId}`);await update(zonaRef,{progreso,estado:progreso===100?'completada':'activa',ultimaActualizacion:new Date().toISOString()});},// Actualizar estado de zona\nupdateZonaEstado:async function(zonaId,estado){let additionalData=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const zonaRef=ref(database,`zonas/${zonaId}`);await update(zonaRef,{estado,...additionalData,ultimaActualizacion:new Date().toISOString()});},// Crear nueva zona\ncreateZona:async zonaData=>{const zonasRef=ref(database,'zonas');const newZonaRef=push(zonasRef);await set(newZonaRef,{...zonaData,createdAt:new Date().toISOString()});return newZonaRef.key;},// Eliminar zona\ndeleteZona:async zonaId=>{const zonaRef=ref(database,`zonas/${zonaId}`);await remove(zonaRef);}};// ========== SERVICIOS PARA TRABAJADORES ==========\nexport const trabajadoresService={// Escuchar cambios en tiempo real de trabajadores\nsubscribeToTrabajadores:callback=>{const trabajadoresRef=ref(database,'trabajadores');const unsubscribe=onValue(trabajadoresRef,snapshot=>{const data=snapshot.val();if(data){const trabajadoresArray=Object.entries(data).map(_ref3=>{let[id,trabajador]=_ref3;return{id,...trabajador};});callback(trabajadoresArray);}else{callback([]);}});return unsubscribe;},// Crear o actualizar trabajador (función para registro inicial)\ncreateOrUpdateTrabajador:async(trabajadorId,data)=>{const trabajadorRef=ref(database,`trabajadores/${trabajadorId}`);await set(trabajadorRef,{...data,ultimaActualizacion:new Date().toISOString()});},// Actualizar datos generales del trabajador\nupdateTrabajadorData:async(trabajadorId,data)=>{const trabajadorRef=ref(database,`trabajadores/${trabajadorId}`);await update(trabajadorRef,{...data,ultimaActualizacion:new Date().toISOString()});},// Actualizar ubicación GPS del trabajador con historial\nupdateTrabajadorLocation:async(trabajadorId,location)=>{try{// Actualizar ubicación actual\nconst ubicacionRef=ref(database,`trabajadores/${trabajadorId}/ubicacion`);await set(ubicacionRef,{lat:location.lat,lng:location.lng,timestamp:location.timestamp||new Date().toISOString()});// Guardar en historial de ubicaciones (opcional - útil para tracking)\nconst historialRef=ref(database,`historial_ubicaciones/${trabajadorId}/${Date.now()}`);await set(historialRef,{lat:location.lat,lng:location.lng,timestamp:location.timestamp||new Date().toISOString()});console.log('✅ Ubicación actualizada en Firebase');}catch(error){console.error('❌ Error al actualizar ubicación:',error);throw error;}},// Obtener trabajador por ID\ngetTrabajadorById:(trabajadorId,callback)=>{const trabajadorRef=ref(database,`trabajadores/${trabajadorId}`);const unsubscribe=onValue(trabajadorRef,snapshot=>{const data=snapshot.val();callback(data?{id:trabajadorId,...data}:null);});return unsubscribe;},// Iniciar recorrido\nstartRecorrido:async(trabajadorId,zonaData)=>{const recorridoId=`${trabajadorId}_${Date.now()}`;const recorridoRef=ref(database,`recorridos/${recorridoId}`);const recorridoData={trabajadorId,zonaId:zonaData.id,zonaNombre:zonaData.nombre,zonaLat:zonaData.lat,zonaLng:zonaData.lng,horaInicio:new Date().toISOString(),estado:'en_camino'};await set(recorridoRef,recorridoData);// Actualizar estado del trabajador\nconst trabajadorRef=ref(database,`trabajadores/${trabajadorId}`);await update(trabajadorRef,{estado:'en_camino',zonaDestino:zonaData.nombre,recorridoActual:recorridoId});return recorridoId;},// Marcar llegada a zona\nmarkArrival:async(recorridoId,trabajadorId)=>{const recorridoRef=ref(database,`recorridos/${recorridoId}`);await update(recorridoRef,{horaLlegada:new Date().toISOString(),estado:'trabajando'});const trabajadorRef=ref(database,`trabajadores/${trabajadorId}`);await update(trabajadorRef,{estado:'trabajando',horaLlegada:new Date().toISOString()});},// Finalizar trabajo\nfinishWork:async(recorridoId,trabajadorId)=>{const recorridoRef=ref(database,`recorridos/${recorridoId}`);await update(recorridoRef,{horaFin:new Date().toISOString(),estado:'completado'});const trabajadorRef=ref(database,`trabajadores/${trabajadorId}`);await update(trabajadorRef,{estado:'disponible',zonaDestino:null,recorridoActual:null});},// Obtener historial de recorridos\ngetRecorridosHistory:(trabajadorId,callback)=>{const recorridosRef=ref(database,'recorridos');const unsubscribe=onValue(recorridosRef,snapshot=>{const data=snapshot.val();if(data){const recorridos=Object.entries(data).filter(_ref4=>{let[id,recorrido]=_ref4;return recorrido.trabajadorId===trabajadorId;}).map(_ref5=>{let[id,recorrido]=_ref5;return{id,...recorrido};}).sort((a,b)=>new Date(b.horaInicio)-new Date(a.horaInicio));callback(recorridos);}else{callback([]);}});return unsubscribe;},// Obtener todos los recorridos\ngetAllRecorridos:callback=>{const recorridosRef=ref(database,'recorridos');const unsubscribe=onValue(recorridosRef,snapshot=>{const data=snapshot.val();if(data){const recorridos=Object.entries(data).map(_ref6=>{let[id,recorrido]=_ref6;return{id,...recorrido};}).sort((a,b)=>new Date(b.horaInicio)-new Date(a.horaInicio));callback(recorridos);}else{callback([]);}});return unsubscribe;},// Limpiar historial de ubicaciones antiguas (más de 7 días)\ncleanOldLocationHistory:async()=>{const historialRef=ref(database,'historial_ubicaciones');const snapshot=await get(historialRef);const data=snapshot.val();if(data){const sevenDaysAgo=Date.now()-7*24*60*60*1000;for(const trabajadorId in data){for(const timestamp in data[trabajadorId]){if(parseInt(timestamp)<sevenDaysAgo){const oldRef=ref(database,`historial_ubicaciones/${trabajadorId}/${timestamp}`);await remove(oldRef);}}}}}};// ========== SERVICIOS DE NOTIFICACIONES ==========\nexport const notificacionesService={// Enviar notificación\nsendNotification:async notificationData=>{const notificacionesRef=ref(database,'notificaciones');const newNotifRef=push(notificacionesRef);await set(newNotifRef,{...notificationData,timestamp:new Date().toISOString(),leido:false});return newNotifRef.key;},// Escuchar notificaciones para un usuario\nsubscribeToNotifications:(userId,callback)=>{const notificacionesRef=ref(database,'notificaciones');const unsubscribe=onValue(notificacionesRef,snapshot=>{const data=snapshot.val();if(data){const notificaciones=Object.entries(data).filter(_ref7=>{let[id,notif]=_ref7;return notif.destinatario===userId;}).map(_ref8=>{let[id,notif]=_ref8;return{id,...notif};}).sort((a,b)=>new Date(b.timestamp)-new Date(a.timestamp));callback(notificaciones);}else{callback([]);}});return unsubscribe;},// Marcar notificación como leída\nmarkAsRead:async notificationId=>{const notifRef=ref(database,`notificaciones/${notificationId}`);await update(notifRef,{leido:true});},// Eliminar notificación\ndeleteNotification:async notificationId=>{const notifRef=ref(database,`notificaciones/${notificationId}`);await remove(notifRef);},// Eliminar todas las notificaciones de un usuario\nclearUserNotifications:async userId=>{const notificacionesRef=ref(database,'notificaciones');const snapshot=await get(notificacionesRef);const data=snapshot.val();if(data){const toDelete=Object.entries(data).filter(_ref9=>{let[id,notif]=_ref9;return notif.destinatario===userId;}).map(_ref0=>{let[id]=_ref0;return id;});for(const id of toDelete){await remove(ref(database,`notificaciones/${id}`));}}}};// ========== SERVICIOS DE REPORTES ==========\nexport const reportesService={// Guardar reporte diario\nsaveDailyReport:async reportData=>{const fecha=new Date().toISOString().split('T')[0];const reportRef=ref(database,`reportes/diarios/${fecha}`);await set(reportRef,{...reportData,fecha,timestamp:new Date().toISOString()});},// Obtener reporte por fecha\ngetReportByDate:(fecha,callback)=>{const reportRef=ref(database,`reportes/diarios/${fecha}`);const unsubscribe=onValue(reportRef,snapshot=>{callback(snapshot.val());});return unsubscribe;},// Obtener reportes del mes\ngetMonthlyReports:(year,month,callback)=>{const reportesRef=ref(database,'reportes/diarios');const unsubscribe=onValue(reportesRef,snapshot=>{const data=snapshot.val();if(data){const monthReports=Object.entries(data).filter(_ref1=>{let[fecha]=_ref1;const[reportYear,reportMonth]=fecha.split('-');return reportYear===year.toString()&&reportMonth===month.toString().padStart(2,'0');}).map(_ref10=>{let[fecha,report]=_ref10;return{fecha,...report};});callback(monthReports);}else{callback([]);}});return unsubscribe;},// Obtener estadísticas en tiempo real\ngetRealtimeStats:callback=>{const refs={vehiculos:ref(database,'vehiculos'),zonas:ref(database,'zonas'),trabajadores:ref(database,'trabajadores')};const stats={vehiculos:{total:0,activos:0,enMantenimiento:0},zonas:{total:0,activas:0,completadas:0},trabajadores:{total:0,enRuta:0,trabajando:0,disponibles:0}};// Escuchar vehículos\nonValue(refs.vehiculos,snapshot=>{const data=snapshot.val();if(data){const vehiculos=Object.values(data);stats.vehiculos.total=vehiculos.length;stats.vehiculos.activos=vehiculos.filter(v=>v.estado==='activo'||v.estado==='en_ruta'||v.estado==='trabajando').length;stats.vehiculos.enMantenimiento=vehiculos.filter(v=>v.estado==='mantenimiento').length;}callback({...stats});});// Escuchar zonas\nonValue(refs.zonas,snapshot=>{const data=snapshot.val();if(data){const zonas=Object.values(data);stats.zonas.total=zonas.length;stats.zonas.activas=zonas.filter(z=>z.estado==='activa').length;stats.zonas.completadas=zonas.filter(z=>z.estado==='completada').length;}callback({...stats});});// Escuchar trabajadores\nonValue(refs.trabajadores,snapshot=>{const data=snapshot.val();if(data){const trabajadores=Object.values(data);stats.trabajadores.total=trabajadores.length;stats.trabajadores.enRuta=trabajadores.filter(t=>t.estado==='en_camino').length;stats.trabajadores.trabajando=trabajadores.filter(t=>t.estado==='trabajando').length;stats.trabajadores.disponibles=trabajadores.filter(t=>t.estado==='disponible').length;}callback({...stats});});},// Generar reporte de productividad\ngenerateProductivityReport:async(startDate,endDate)=>{const recorridosRef=ref(database,'recorridos');const snapshot=await get(recorridosRef);const data=snapshot.val();if(data){const recorridos=Object.values(data).filter(r=>{const fecha=new Date(r.horaInicio);return fecha>=new Date(startDate)&&fecha<=new Date(endDate);});// Calcular estadísticas\nconst stats={totalRecorridos:recorridos.length,recorridosCompletados:recorridos.filter(r=>r.estado==='completado').length,tiempoPromedioViaje:0,tiempoPromedioTrabajo:0,trabajadoresActivos:new Set(recorridos.map(r=>r.trabajadorId)).size};// Calcular tiempos promedio\nconst tiemposViaje=[];const tiemposTrabajo=[];recorridos.forEach(r=>{if(r.horaLlegada&&r.horaInicio){const tiempoViaje=new Date(r.horaLlegada)-new Date(r.horaInicio);tiemposViaje.push(tiempoViaje);}if(r.horaFin&&r.horaLlegada){const tiempoTrabajo=new Date(r.horaFin)-new Date(r.horaLlegada);tiemposTrabajo.push(tiempoTrabajo);}});if(tiemposViaje.length>0){stats.tiempoPromedioViaje=tiemposViaje.reduce((a,b)=>a+b,0)/tiemposViaje.length;}if(tiemposTrabajo.length>0){stats.tiempoPromedioTrabajo=tiemposTrabajo.reduce((a,b)=>a+b,0)/tiemposTrabajo.length;}return stats;}return null;}};// ========== SERVICIO DE LIMPIEZA AUTOMÁTICA ==========\nexport const maintenanceService={// Limpiar datos antiguos (ejecutar periódicamente)\ncleanOldData:async()=>{try{// Limpiar historial de ubicaciones de más de 7 días\nawait trabajadoresService.cleanOldLocationHistory();// Limpiar notificaciones leídas de más de 30 días\nconst notificacionesRef=ref(database,'notificaciones');const snapshot=await get(notificacionesRef);const data=snapshot.val();if(data){const thirtyDaysAgo=new Date(Date.now()-30*24*60*60*1000);for(const[id,notif]of Object.entries(data)){if(notif.leido&&new Date(notif.timestamp)<thirtyDaysAgo){await remove(ref(database,`notificaciones/${id}`));}}}console.log('✅ Limpieza de datos antiguos completada');}catch(error){console.error('❌ Error en limpieza de datos:',error);}}};","map":{"version":3,"names":["database","ref","set","get","onValue","push","update","remove","vehiculosService","subscribeToVehiculos","callback","vehiculosRef","unsubscribe","snapshot","data","val","vehiculosArray","Object","entries","map","_ref","id","vehiculo","updateVehiculoPosition","vehiculoId","position","vehiculoRef","lat","lng","ultimaActualizacion","Date","toISOString","updateVehiculoEstado","estado","additionalData","arguments","length","undefined","createVehiculo","vehiculoData","newVehiculoRef","createdAt","key","zonasService","subscribeToZonas","zonasRef","zonasArray","_ref2","zona","updateZonaProgreso","zonaId","progreso","zonaRef","updateZonaEstado","createZona","zonaData","newZonaRef","deleteZona","trabajadoresService","subscribeToTrabajadores","trabajadoresRef","trabajadoresArray","_ref3","trabajador","createOrUpdateTrabajador","trabajadorId","trabajadorRef","updateTrabajadorData","updateTrabajadorLocation","location","ubicacionRef","timestamp","historialRef","now","console","log","error","getTrabajadorById","startRecorrido","recorridoId","recorridoRef","recorridoData","zonaNombre","nombre","zonaLat","zonaLng","horaInicio","zonaDestino","recorridoActual","markArrival","horaLlegada","finishWork","horaFin","getRecorridosHistory","recorridosRef","recorridos","filter","_ref4","recorrido","_ref5","sort","a","b","getAllRecorridos","_ref6","cleanOldLocationHistory","sevenDaysAgo","parseInt","oldRef","notificacionesService","sendNotification","notificationData","notificacionesRef","newNotifRef","leido","subscribeToNotifications","userId","notificaciones","_ref7","notif","destinatario","_ref8","markAsRead","notificationId","notifRef","deleteNotification","clearUserNotifications","toDelete","_ref9","_ref0","reportesService","saveDailyReport","reportData","fecha","split","reportRef","getReportByDate","getMonthlyReports","year","month","reportesRef","monthReports","_ref1","reportYear","reportMonth","toString","padStart","_ref10","report","getRealtimeStats","refs","vehiculos","zonas","trabajadores","stats","total","activos","enMantenimiento","activas","completadas","enRuta","trabajando","disponibles","values","v","z","t","generateProductivityReport","startDate","endDate","r","totalRecorridos","recorridosCompletados","tiempoPromedioViaje","tiempoPromedioTrabajo","trabajadoresActivos","Set","size","tiemposViaje","tiemposTrabajo","forEach","tiempoViaje","tiempoTrabajo","reduce","maintenanceService","cleanOldData","thirtyDaysAgo"],"sources":["C:/Users/Izan/Desktop/AppReact/mapa-quillon/src/services/firebaseservices.js"],"sourcesContent":["// src/services/firebaseservices.js\r\nimport { database } from '../config/firebase';\r\nimport { ref, set, get, onValue, push, update, remove } from 'firebase/database';\r\n\r\n// ========== SERVICIOS PARA VEHÍCULOS ==========\r\n\r\nexport const vehiculosService = {\r\n  // Escuchar cambios en tiempo real de vehículos\r\n  subscribeToVehiculos: (callback) => {\r\n    const vehiculosRef = ref(database, 'vehiculos');\r\n    const unsubscribe = onValue(vehiculosRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const vehiculosArray = Object.entries(data).map(([id, vehiculo]) => ({\r\n          id,\r\n          ...vehiculo\r\n        }));\r\n        callback(vehiculosArray);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Actualizar posición de vehículo\r\n  updateVehiculoPosition: async (vehiculoId, position) => {\r\n    const vehiculoRef = ref(database, `vehiculos/${vehiculoId}`);\r\n    await update(vehiculoRef, {\r\n      lat: position.lat,\r\n      lng: position.lng,\r\n      ultimaActualizacion: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Actualizar estado de vehículo\r\n  updateVehiculoEstado: async (vehiculoId, estado, additionalData = {}) => {\r\n    const vehiculoRef = ref(database, `vehiculos/${vehiculoId}`);\r\n    await update(vehiculoRef, {\r\n      estado,\r\n      ...additionalData,\r\n      ultimaActualizacion: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Crear nuevo vehículo\r\n  createVehiculo: async (vehiculoData) => {\r\n    const vehiculosRef = ref(database, 'vehiculos');\r\n    const newVehiculoRef = push(vehiculosRef);\r\n    await set(newVehiculoRef, {\r\n      ...vehiculoData,\r\n      createdAt: new Date().toISOString()\r\n    });\r\n    return newVehiculoRef.key;\r\n  }\r\n};\r\n\r\n// ========== SERVICIOS PARA ZONAS ==========\r\n\r\nexport const zonasService = {\r\n  // Escuchar cambios en tiempo real de zonas\r\n  subscribeToZonas: (callback) => {\r\n    const zonasRef = ref(database, 'zonas');\r\n    const unsubscribe = onValue(zonasRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const zonasArray = Object.entries(data).map(([id, zona]) => ({\r\n          id,\r\n          ...zona\r\n        }));\r\n        callback(zonasArray);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Actualizar progreso de zona\r\n  updateZonaProgreso: async (zonaId, progreso) => {\r\n    const zonaRef = ref(database, `zonas/${zonaId}`);\r\n    await update(zonaRef, {\r\n      progreso,\r\n      estado: progreso === 100 ? 'completada' : 'activa',\r\n      ultimaActualizacion: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Actualizar estado de zona\r\n  updateZonaEstado: async (zonaId, estado, additionalData = {}) => {\r\n    const zonaRef = ref(database, `zonas/${zonaId}`);\r\n    await update(zonaRef, {\r\n      estado,\r\n      ...additionalData,\r\n      ultimaActualizacion: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Crear nueva zona\r\n  createZona: async (zonaData) => {\r\n    const zonasRef = ref(database, 'zonas');\r\n    const newZonaRef = push(zonasRef);\r\n    await set(newZonaRef, {\r\n      ...zonaData,\r\n      createdAt: new Date().toISOString()\r\n    });\r\n    return newZonaRef.key;\r\n  },\r\n\r\n  // Eliminar zona\r\n  deleteZona: async (zonaId) => {\r\n    const zonaRef = ref(database, `zonas/${zonaId}`);\r\n    await remove(zonaRef);\r\n  }\r\n};\r\n\r\n// ========== SERVICIOS PARA TRABAJADORES ==========\r\n\r\nexport const trabajadoresService = {\r\n  // Escuchar cambios en tiempo real de trabajadores\r\n  subscribeToTrabajadores: (callback) => {\r\n    const trabajadoresRef = ref(database, 'trabajadores');\r\n    const unsubscribe = onValue(trabajadoresRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const trabajadoresArray = Object.entries(data).map(([id, trabajador]) => ({\r\n          id,\r\n          ...trabajador\r\n        }));\r\n        callback(trabajadoresArray);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Crear o actualizar trabajador (función para registro inicial)\r\n  createOrUpdateTrabajador: async (trabajadorId, data) => {\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\r\n    await set(trabajadorRef, {\r\n      ...data,\r\n      ultimaActualizacion: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Actualizar datos generales del trabajador\r\n  updateTrabajadorData: async (trabajadorId, data) => {\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\r\n    await update(trabajadorRef, {\r\n      ...data,\r\n      ultimaActualizacion: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Actualizar ubicación GPS del trabajador con historial\r\n  updateTrabajadorLocation: async (trabajadorId, location) => {\r\n    try {\r\n      // Actualizar ubicación actual\r\n      const ubicacionRef = ref(database, `trabajadores/${trabajadorId}/ubicacion`);\r\n      await set(ubicacionRef, {\r\n        lat: location.lat,\r\n        lng: location.lng,\r\n        timestamp: location.timestamp || new Date().toISOString()\r\n      });\r\n      \r\n      // Guardar en historial de ubicaciones (opcional - útil para tracking)\r\n      const historialRef = ref(database, `historial_ubicaciones/${trabajadorId}/${Date.now()}`);\r\n      await set(historialRef, {\r\n        lat: location.lat,\r\n        lng: location.lng,\r\n        timestamp: location.timestamp || new Date().toISOString()\r\n      });\r\n\r\n      console.log('✅ Ubicación actualizada en Firebase');\r\n    } catch (error) {\r\n      console.error('❌ Error al actualizar ubicación:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener trabajador por ID\r\n  getTrabajadorById: (trabajadorId, callback) => {\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\r\n    const unsubscribe = onValue(trabajadorRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      callback(data ? { id: trabajadorId, ...data } : null);\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Iniciar recorrido\r\n  startRecorrido: async (trabajadorId, zonaData) => {\r\n    const recorridoId = `${trabajadorId}_${Date.now()}`;\r\n    const recorridoRef = ref(database, `recorridos/${recorridoId}`);\r\n    const recorridoData = {\r\n      trabajadorId,\r\n      zonaId: zonaData.id,\r\n      zonaNombre: zonaData.nombre,\r\n      zonaLat: zonaData.lat,\r\n      zonaLng: zonaData.lng,\r\n      horaInicio: new Date().toISOString(),\r\n      estado: 'en_camino'\r\n    };\r\n    \r\n    await set(recorridoRef, recorridoData);\r\n    \r\n    // Actualizar estado del trabajador\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\r\n    await update(trabajadorRef, {\r\n      estado: 'en_camino',\r\n      zonaDestino: zonaData.nombre,\r\n      recorridoActual: recorridoId\r\n    });\r\n    \r\n    return recorridoId;\r\n  },\r\n\r\n  // Marcar llegada a zona\r\n  markArrival: async (recorridoId, trabajadorId) => {\r\n    const recorridoRef = ref(database, `recorridos/${recorridoId}`);\r\n    await update(recorridoRef, {\r\n      horaLlegada: new Date().toISOString(),\r\n      estado: 'trabajando'\r\n    });\r\n\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\r\n    await update(trabajadorRef, {\r\n      estado: 'trabajando',\r\n      horaLlegada: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Finalizar trabajo\r\n  finishWork: async (recorridoId, trabajadorId) => {\r\n    const recorridoRef = ref(database, `recorridos/${recorridoId}`);\r\n    await update(recorridoRef, {\r\n      horaFin: new Date().toISOString(),\r\n      estado: 'completado'\r\n    });\r\n\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\r\n    await update(trabajadorRef, {\r\n      estado: 'disponible',\r\n      zonaDestino: null,\r\n      recorridoActual: null\r\n    });\r\n  },\r\n\r\n  // Obtener historial de recorridos\r\n  getRecorridosHistory: (trabajadorId, callback) => {\r\n    const recorridosRef = ref(database, 'recorridos');\r\n    const unsubscribe = onValue(recorridosRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const recorridos = Object.entries(data)\r\n          .filter(([id, recorrido]) => recorrido.trabajadorId === trabajadorId)\r\n          .map(([id, recorrido]) => ({ id, ...recorrido }))\r\n          .sort((a, b) => new Date(b.horaInicio) - new Date(a.horaInicio));\r\n        callback(recorridos);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Obtener todos los recorridos\r\n  getAllRecorridos: (callback) => {\r\n    const recorridosRef = ref(database, 'recorridos');\r\n    const unsubscribe = onValue(recorridosRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const recorridos = Object.entries(data)\r\n          .map(([id, recorrido]) => ({ id, ...recorrido }))\r\n          .sort((a, b) => new Date(b.horaInicio) - new Date(a.horaInicio));\r\n        callback(recorridos);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Limpiar historial de ubicaciones antiguas (más de 7 días)\r\n  cleanOldLocationHistory: async () => {\r\n    const historialRef = ref(database, 'historial_ubicaciones');\r\n    const snapshot = await get(historialRef);\r\n    const data = snapshot.val();\r\n    \r\n    if (data) {\r\n      const sevenDaysAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);\r\n      \r\n      for (const trabajadorId in data) {\r\n        for (const timestamp in data[trabajadorId]) {\r\n          if (parseInt(timestamp) < sevenDaysAgo) {\r\n            const oldRef = ref(database, `historial_ubicaciones/${trabajadorId}/${timestamp}`);\r\n            await remove(oldRef);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// ========== SERVICIOS DE NOTIFICACIONES ==========\r\n\r\nexport const notificacionesService = {\r\n  // Enviar notificación\r\n  sendNotification: async (notificationData) => {\r\n    const notificacionesRef = ref(database, 'notificaciones');\r\n    const newNotifRef = push(notificacionesRef);\r\n    await set(newNotifRef, {\r\n      ...notificationData,\r\n      timestamp: new Date().toISOString(),\r\n      leido: false\r\n    });\r\n    return newNotifRef.key;\r\n  },\r\n\r\n  // Escuchar notificaciones para un usuario\r\n  subscribeToNotifications: (userId, callback) => {\r\n    const notificacionesRef = ref(database, 'notificaciones');\r\n    const unsubscribe = onValue(notificacionesRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const notificaciones = Object.entries(data)\r\n          .filter(([id, notif]) => notif.destinatario === userId)\r\n          .map(([id, notif]) => ({ id, ...notif }))\r\n          .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n        callback(notificaciones);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Marcar notificación como leída\r\n  markAsRead: async (notificationId) => {\r\n    const notifRef = ref(database, `notificaciones/${notificationId}`);\r\n    await update(notifRef, { leido: true });\r\n  },\r\n\r\n  // Eliminar notificación\r\n  deleteNotification: async (notificationId) => {\r\n    const notifRef = ref(database, `notificaciones/${notificationId}`);\r\n    await remove(notifRef);\r\n  },\r\n\r\n  // Eliminar todas las notificaciones de un usuario\r\n  clearUserNotifications: async (userId) => {\r\n    const notificacionesRef = ref(database, 'notificaciones');\r\n    const snapshot = await get(notificacionesRef);\r\n    const data = snapshot.val();\r\n    \r\n    if (data) {\r\n      const toDelete = Object.entries(data)\r\n        .filter(([id, notif]) => notif.destinatario === userId)\r\n        .map(([id]) => id);\r\n      \r\n      for (const id of toDelete) {\r\n        await remove(ref(database, `notificaciones/${id}`));\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// ========== SERVICIOS DE REPORTES ==========\r\n\r\nexport const reportesService = {\r\n  // Guardar reporte diario\r\n  saveDailyReport: async (reportData) => {\r\n    const fecha = new Date().toISOString().split('T')[0];\r\n    const reportRef = ref(database, `reportes/diarios/${fecha}`);\r\n    await set(reportRef, {\r\n      ...reportData,\r\n      fecha,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Obtener reporte por fecha\r\n  getReportByDate: (fecha, callback) => {\r\n    const reportRef = ref(database, `reportes/diarios/${fecha}`);\r\n    const unsubscribe = onValue(reportRef, (snapshot) => {\r\n      callback(snapshot.val());\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Obtener reportes del mes\r\n  getMonthlyReports: (year, month, callback) => {\r\n    const reportesRef = ref(database, 'reportes/diarios');\r\n    const unsubscribe = onValue(reportesRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const monthReports = Object.entries(data)\r\n          .filter(([fecha]) => {\r\n            const [reportYear, reportMonth] = fecha.split('-');\r\n            return reportYear === year.toString() && reportMonth === month.toString().padStart(2, '0');\r\n          })\r\n          .map(([fecha, report]) => ({ fecha, ...report }));\r\n        callback(monthReports);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Obtener estadísticas en tiempo real\r\n  getRealtimeStats: (callback) => {\r\n    const refs = {\r\n      vehiculos: ref(database, 'vehiculos'),\r\n      zonas: ref(database, 'zonas'),\r\n      trabajadores: ref(database, 'trabajadores')\r\n    };\r\n\r\n    const stats = {\r\n      vehiculos: { total: 0, activos: 0, enMantenimiento: 0 },\r\n      zonas: { total: 0, activas: 0, completadas: 0 },\r\n      trabajadores: { total: 0, enRuta: 0, trabajando: 0, disponibles: 0 }\r\n    };\r\n\r\n    // Escuchar vehículos\r\n    onValue(refs.vehiculos, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const vehiculos = Object.values(data);\r\n        stats.vehiculos.total = vehiculos.length;\r\n        stats.vehiculos.activos = vehiculos.filter(v => \r\n          v.estado === 'activo' || v.estado === 'en_ruta' || v.estado === 'trabajando'\r\n        ).length;\r\n        stats.vehiculos.enMantenimiento = vehiculos.filter(v => \r\n          v.estado === 'mantenimiento'\r\n        ).length;\r\n      }\r\n      callback({ ...stats });\r\n    });\r\n\r\n    // Escuchar zonas\r\n    onValue(refs.zonas, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const zonas = Object.values(data);\r\n        stats.zonas.total = zonas.length;\r\n        stats.zonas.activas = zonas.filter(z => z.estado === 'activa').length;\r\n        stats.zonas.completadas = zonas.filter(z => z.estado === 'completada').length;\r\n      }\r\n      callback({ ...stats });\r\n    });\r\n\r\n    // Escuchar trabajadores\r\n    onValue(refs.trabajadores, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const trabajadores = Object.values(data);\r\n        stats.trabajadores.total = trabajadores.length;\r\n        stats.trabajadores.enRuta = trabajadores.filter(t => t.estado === 'en_camino').length;\r\n        stats.trabajadores.trabajando = trabajadores.filter(t => t.estado === 'trabajando').length;\r\n        stats.trabajadores.disponibles = trabajadores.filter(t => t.estado === 'disponible').length;\r\n      }\r\n      callback({ ...stats });\r\n    });\r\n  },\r\n\r\n  // Generar reporte de productividad\r\n  generateProductivityReport: async (startDate, endDate) => {\r\n    const recorridosRef = ref(database, 'recorridos');\r\n    const snapshot = await get(recorridosRef);\r\n    const data = snapshot.val();\r\n    \r\n    if (data) {\r\n      const recorridos = Object.values(data).filter(r => {\r\n        const fecha = new Date(r.horaInicio);\r\n        return fecha >= new Date(startDate) && fecha <= new Date(endDate);\r\n      });\r\n      \r\n      // Calcular estadísticas\r\n      const stats = {\r\n        totalRecorridos: recorridos.length,\r\n        recorridosCompletados: recorridos.filter(r => r.estado === 'completado').length,\r\n        tiempoPromedioViaje: 0,\r\n        tiempoPromedioTrabajo: 0,\r\n        trabajadoresActivos: new Set(recorridos.map(r => r.trabajadorId)).size\r\n      };\r\n      \r\n      // Calcular tiempos promedio\r\n      const tiemposViaje = [];\r\n      const tiemposTrabajo = [];\r\n      \r\n      recorridos.forEach(r => {\r\n        if (r.horaLlegada && r.horaInicio) {\r\n          const tiempoViaje = new Date(r.horaLlegada) - new Date(r.horaInicio);\r\n          tiemposViaje.push(tiempoViaje);\r\n        }\r\n        if (r.horaFin && r.horaLlegada) {\r\n          const tiempoTrabajo = new Date(r.horaFin) - new Date(r.horaLlegada);\r\n          tiemposTrabajo.push(tiempoTrabajo);\r\n        }\r\n      });\r\n      \r\n      if (tiemposViaje.length > 0) {\r\n        stats.tiempoPromedioViaje = tiemposViaje.reduce((a, b) => a + b, 0) / tiemposViaje.length;\r\n      }\r\n      if (tiemposTrabajo.length > 0) {\r\n        stats.tiempoPromedioTrabajo = tiemposTrabajo.reduce((a, b) => a + b, 0) / tiemposTrabajo.length;\r\n      }\r\n      \r\n      return stats;\r\n    }\r\n    \r\n    return null;\r\n  }\r\n};\r\n\r\n// ========== SERVICIO DE LIMPIEZA AUTOMÁTICA ==========\r\n\r\nexport const maintenanceService = {\r\n  // Limpiar datos antiguos (ejecutar periódicamente)\r\n  cleanOldData: async () => {\r\n    try {\r\n      // Limpiar historial de ubicaciones de más de 7 días\r\n      await trabajadoresService.cleanOldLocationHistory();\r\n      \r\n      // Limpiar notificaciones leídas de más de 30 días\r\n      const notificacionesRef = ref(database, 'notificaciones');\r\n      const snapshot = await get(notificacionesRef);\r\n      const data = snapshot.val();\r\n      \r\n      if (data) {\r\n        const thirtyDaysAgo = new Date(Date.now() - (30 * 24 * 60 * 60 * 1000));\r\n        \r\n        for (const [id, notif] of Object.entries(data)) {\r\n          if (notif.leido && new Date(notif.timestamp) < thirtyDaysAgo) {\r\n            await remove(ref(database, `notificaciones/${id}`));\r\n          }\r\n        }\r\n      }\r\n      \r\n      console.log('✅ Limpieza de datos antiguos completada');\r\n    } catch (error) {\r\n      console.error('❌ Error en limpieza de datos:', error);\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}