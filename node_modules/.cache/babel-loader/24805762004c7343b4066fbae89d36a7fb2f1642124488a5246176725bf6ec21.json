{"ast":null,"code":"// src/services/firebaseservices.js\nimport { database } from '../config/firebase';\nimport { ref, set, onValue, push, update, remove } from 'firebase/database';\n\n// ========== SERVICIOS PARA VEHÍCULOS ==========\n\nexport const vehiculosService = {\n  // Escuchar cambios en tiempo real de vehículos\n  subscribeToVehiculos: callback => {\n    const vehiculosRef = ref(database, 'vehiculos');\n    const unsubscribe = onValue(vehiculosRef, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const vehiculosArray = Object.entries(data).map(([id, vehiculo]) => ({\n          id,\n          ...vehiculo\n        }));\n        callback(vehiculosArray);\n      } else {\n        callback([]);\n      }\n    });\n    return unsubscribe;\n  },\n  // Actualizar posición de vehículo\n  updateVehiculoPosition: async (vehiculoId, position) => {\n    const vehiculoRef = ref(database, `vehiculos/${vehiculoId}`);\n    await update(vehiculoRef, {\n      lat: position.lat,\n      lng: position.lng,\n      ultimaActualizacion: new Date().toISOString()\n    });\n  },\n  // Actualizar estado de vehículo\n  updateVehiculoEstado: async (vehiculoId, estado, additionalData = {}) => {\n    const vehiculoRef = ref(database, `vehiculos/${vehiculoId}`);\n    await update(vehiculoRef, {\n      estado,\n      ...additionalData,\n      ultimaActualizacion: new Date().toISOString()\n    });\n  },\n  // Crear nuevo vehículo\n  createVehiculo: async vehiculoData => {\n    const vehiculosRef = ref(database, 'vehiculos');\n    const newVehiculoRef = push(vehiculosRef);\n    await set(newVehiculoRef, {\n      ...vehiculoData,\n      createdAt: new Date().toISOString()\n    });\n    return newVehiculoRef.key;\n  }\n};\n\n// ========== SERVICIOS PARA ZONAS ==========\n\nexport const zonasService = {\n  // Escuchar cambios en tiempo real de zonas\n  subscribeToZonas: callback => {\n    const zonasRef = ref(database, 'zonas');\n    const unsubscribe = onValue(zonasRef, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const zonasArray = Object.entries(data).map(([id, zona]) => ({\n          id,\n          ...zona\n        }));\n        callback(zonasArray);\n      } else {\n        callback([]);\n      }\n    });\n    return unsubscribe;\n  },\n  // Actualizar progreso de zona\n  updateZonaProgreso: async (zonaId, progreso) => {\n    const zonaRef = ref(database, `zonas/${zonaId}`);\n    await update(zonaRef, {\n      progreso,\n      estado: progreso === 100 ? 'completada' : 'activa',\n      ultimaActualizacion: new Date().toISOString()\n    });\n  },\n  // Actualizar estado de zona\n  updateZonaEstado: async (zonaId, estado, additionalData = {}) => {\n    const zonaRef = ref(database, `zonas/${zonaId}`);\n    await update(zonaRef, {\n      estado,\n      ...additionalData,\n      ultimaActualizacion: new Date().toISOString()\n    });\n  },\n  // Crear nueva zona\n  createZona: async zonaData => {\n    const zonasRef = ref(database, 'zonas');\n    const newZonaRef = push(zonasRef);\n    await set(newZonaRef, {\n      ...zonaData,\n      createdAt: new Date().toISOString()\n    });\n    return newZonaRef.key;\n  },\n  // Eliminar zona\n  deleteZona: async zonaId => {\n    const zonaRef = ref(database, `zonas/${zonaId}`);\n    await remove(zonaRef);\n  }\n};\n\n// ========== SERVICIOS PARA TRABAJADORES ==========\n\nexport const trabajadoresService = {\n  // Escuchar cambios en tiempo real de trabajadores\n  subscribeToTrabajadores: callback => {\n    const trabajadoresRef = ref(database, 'trabajadores');\n    const unsubscribe = onValue(trabajadoresRef, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const trabajadoresArray = Object.entries(data).map(([id, trabajador]) => ({\n          id,\n          ...trabajador\n        }));\n        callback(trabajadoresArray);\n      } else {\n        callback([]);\n      }\n    });\n    return unsubscribe;\n  },\n  // Crear o actualizar trabajador (función para registro inicial)\n  createOrUpdateTrabajador: async (trabajadorId, data) => {\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\n    await set(trabajadorRef, {\n      ...data,\n      ultimaActualizacion: new Date().toISOString()\n    });\n  },\n  // Actualizar datos generales del trabajador\n  updateTrabajadorData: async (trabajadorId, data) => {\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\n    await update(trabajadorRef, {\n      ...data,\n      ultimaActualizacion: new Date().toISOString()\n    });\n  },\n  // Actualizar ubicación GPS del trabajador con historial\n  updateTrabajadorLocation: async (trabajadorId, location) => {\n    try {\n      // Actualizar ubicación actual\n      const ubicacionRef = ref(database, `trabajadores/${trabajadorId}/ubicacion`);\n      await set(ubicacionRef, {\n        lat: location.lat,\n        lng: location.lng,\n        timestamp: location.timestamp || new Date().toISOString()\n      });\n\n      // Guardar en historial de ubicaciones (opcional - útil para tracking)\n      const historialRef = ref(database, `historial_ubicaciones/${trabajadorId}/${Date.now()}`);\n      await set(historialRef, {\n        lat: location.lat,\n        lng: location.lng,\n        timestamp: location.timestamp || new Date().toISOString()\n      });\n      console.log('✅ Ubicación actualizada en Firebase');\n    } catch (error) {\n      console.error('❌ Error al actualizar ubicación:', error);\n      throw error;\n    }\n  },\n  // Obtener trabajador por ID\n  getTrabajadorById: (trabajadorId, callback) => {\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\n    const unsubscribe = onValue(trabajadorRef, snapshot => {\n      const data = snapshot.val();\n      callback(data ? {\n        id: trabajadorId,\n        ...data\n      } : null);\n    });\n    return unsubscribe;\n  },\n  // Iniciar recorrido\n  startRecorrido: async (trabajadorId, zonaData) => {\n    const recorridoId = `${trabajadorId}_${Date.now()}`;\n    const recorridoRef = ref(database, `recorridos/${recorridoId}`);\n    const recorridoData = {\n      trabajadorId,\n      zonaId: zonaData.id,\n      zonaNombre: zonaData.nombre,\n      zonaLat: zonaData.lat,\n      zonaLng: zonaData.lng,\n      horaInicio: new Date().toISOString(),\n      estado: 'en_camino'\n    };\n    await set(recorridoRef, recorridoData);\n\n    // Actualizar estado del trabajador\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\n    await update(trabajadorRef, {\n      estado: 'en_camino',\n      zonaDestino: zonaData.nombre,\n      recorridoActual: recorridoId\n    });\n    return recorridoId;\n  },\n  // Marcar llegada a zona\n  markArrival: async (recorridoId, trabajadorId) => {\n    const recorridoRef = ref(database, `recorridos/${recorridoId}`);\n    await update(recorridoRef, {\n      horaLlegada: new Date().toISOString(),\n      estado: 'trabajando'\n    });\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\n    await update(trabajadorRef, {\n      estado: 'trabajando',\n      horaLlegada: new Date().toISOString()\n    });\n  },\n  // Finalizar trabajo\n  finishWork: async (recorridoId, trabajadorId) => {\n    const recorridoRef = ref(database, `recorridos/${recorridoId}`);\n    await update(recorridoRef, {\n      horaFin: new Date().toISOString(),\n      estado: 'completado'\n    });\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\n    await update(trabajadorRef, {\n      estado: 'disponible',\n      zonaDestino: null,\n      recorridoActual: null\n    });\n  },\n  // Obtener historial de recorridos\n  getRecorridosHistory: (trabajadorId, callback) => {\n    const recorridosRef = ref(database, 'recorridos');\n    const unsubscribe = onValue(recorridosRef, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const recorridos = Object.entries(data).filter(([id, recorrido]) => recorrido.trabajadorId === trabajadorId).map(([id, recorrido]) => ({\n          id,\n          ...recorrido\n        })).sort((a, b) => new Date(b.horaInicio) - new Date(a.horaInicio));\n        callback(recorridos);\n      } else {\n        callback([]);\n      }\n    });\n    return unsubscribe;\n  },\n  // Obtener todos los recorridos\n  getAllRecorridos: callback => {\n    const recorridosRef = ref(database, 'recorridos');\n    const unsubscribe = onValue(recorridosRef, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const recorridos = Object.entries(data).map(([id, recorrido]) => ({\n          id,\n          ...recorrido\n        })).sort((a, b) => new Date(b.horaInicio) - new Date(a.horaInicio));\n        callback(recorridos);\n      } else {\n        callback([]);\n      }\n    });\n    return unsubscribe;\n  },\n  // Limpiar historial de ubicaciones antiguas (más de 7 días)\n  cleanOldLocationHistory: async () => {\n    const historialRef = ref(database, 'historial_ubicaciones');\n    const snapshot = await get(historialRef);\n    const data = snapshot.val();\n    if (data) {\n      const sevenDaysAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;\n      for (const trabajadorId in data) {\n        for (const timestamp in data[trabajadorId]) {\n          if (parseInt(timestamp) < sevenDaysAgo) {\n            const oldRef = ref(database, `historial_ubicaciones/${trabajadorId}/${timestamp}`);\n            await remove(oldRef);\n          }\n        }\n      }\n    }\n  }\n};\n\n// ========== SERVICIOS DE NOTIFICACIONES ==========\n\nexport const notificacionesService = {\n  // Enviar notificación\n  sendNotification: async notificationData => {\n    const notificacionesRef = ref(database, 'notificaciones');\n    const newNotifRef = push(notificacionesRef);\n    await set(newNotifRef, {\n      ...notificationData,\n      timestamp: new Date().toISOString(),\n      leido: false\n    });\n    return newNotifRef.key;\n  },\n  // Escuchar notificaciones para un usuario\n  subscribeToNotifications: (userId, callback) => {\n    const notificacionesRef = ref(database, 'notificaciones');\n    const unsubscribe = onValue(notificacionesRef, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const notificaciones = Object.entries(data).filter(([id, notif]) => notif.destinatario === userId).map(([id, notif]) => ({\n          id,\n          ...notif\n        })).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n        callback(notificaciones);\n      } else {\n        callback([]);\n      }\n    });\n    return unsubscribe;\n  },\n  // Marcar notificación como leída\n  markAsRead: async notificationId => {\n    const notifRef = ref(database, `notificaciones/${notificationId}`);\n    await update(notifRef, {\n      leido: true\n    });\n  },\n  // Eliminar notificación\n  deleteNotification: async notificationId => {\n    const notifRef = ref(database, `notificaciones/${notificationId}`);\n    await remove(notifRef);\n  },\n  // Eliminar todas las notificaciones de un usuario\n  clearUserNotifications: async userId => {\n    const notificacionesRef = ref(database, 'notificaciones');\n    const snapshot = await get(notificacionesRef);\n    const data = snapshot.val();\n    if (data) {\n      const toDelete = Object.entries(data).filter(([id, notif]) => notif.destinatario === userId).map(([id]) => id);\n      for (const id of toDelete) {\n        await deleteNotification(id);\n      }\n    }\n  }\n};\n\n// ========== SERVICIOS DE REPORTES ==========\n\nexport const reportesService = {\n  // Guardar reporte diario\n  saveDailyReport: async reportData => {\n    const fecha = new Date().toISOString().split('T')[0];\n    const reportRef = ref(database, `reportes/diarios/${fecha}`);\n    await set(reportRef, {\n      ...reportData,\n      fecha,\n      timestamp: new Date().toISOString()\n    });\n  },\n  // Obtener reporte por fecha\n  getReportByDate: (fecha, callback) => {\n    const reportRef = ref(database, `reportes/diarios/${fecha}`);\n    const unsubscribe = onValue(reportRef, snapshot => {\n      callback(snapshot.val());\n    });\n    return unsubscribe;\n  },\n  // Obtener reportes del mes\n  getMonthlyReports: (year, month, callback) => {\n    const reportesRef = ref(database, 'reportes/diarios');\n    const unsubscribe = onValue(reportesRef, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const monthReports = Object.entries(data).filter(([fecha]) => {\n          const [reportYear, reportMonth] = fecha.split('-');\n          return reportYear === year.toString() && reportMonth === month.toString().padStart(2, '0');\n        }).map(([fecha, report]) => ({\n          fecha,\n          ...report\n        }));\n        callback(monthReports);\n      } else {\n        callback([]);\n      }\n    });\n    return unsubscribe;\n  },\n  // Obtener estadísticas en tiempo real\n  getRealtimeStats: callback => {\n    const refs = {\n      vehiculos: ref(database, 'vehiculos'),\n      zonas: ref(database, 'zonas'),\n      trabajadores: ref(database, 'trabajadores')\n    };\n    const stats = {\n      vehiculos: {\n        total: 0,\n        activos: 0,\n        enMantenimiento: 0\n      },\n      zonas: {\n        total: 0,\n        activas: 0,\n        completadas: 0\n      },\n      trabajadores: {\n        total: 0,\n        enRuta: 0,\n        trabajando: 0,\n        disponibles: 0\n      }\n    };\n\n    // Escuchar vehículos\n    onValue(refs.vehiculos, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const vehiculos = Object.values(data);\n        stats.vehiculos.total = vehiculos.length;\n        stats.vehiculos.activos = vehiculos.filter(v => v.estado === 'activo' || v.estado === 'en_ruta' || v.estado === 'trabajando').length;\n        stats.vehiculos.enMantenimiento = vehiculos.filter(v => v.estado === 'mantenimiento').length;\n      }\n      callback({\n        ...stats\n      });\n    });\n\n    // Escuchar zonas\n    onValue(refs.zonas, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const zonas = Object.values(data);\n        stats.zonas.total = zonas.length;\n        stats.zonas.activas = zonas.filter(z => z.estado === 'activa').length;\n        stats.zonas.completadas = zonas.filter(z => z.estado === 'completada').length;\n      }\n      callback({\n        ...stats\n      });\n    });\n\n    // Escuchar trabajadores\n    onValue(refs.trabajadores, snapshot => {\n      const data = snapshot.val();\n      if (data) {\n        const trabajadores = Object.values(data);\n        stats.trabajadores.total = trabajadores.length;\n        stats.trabajadores.enRuta = trabajadores.filter(t => t.estado === 'en_camino').length;\n        stats.trabajadores.trabajando = trabajadores.filter(t => t.estado === 'trabajando').length;\n        stats.trabajadores.disponibles = trabajadores.filter(t => t.estado === 'disponible').length;\n      }\n      callback({\n        ...stats\n      });\n    });\n  },\n  // Generar reporte de productividad\n  generateProductivityReport: async (startDate, endDate) => {\n    const recorridosRef = ref(database, 'recorridos');\n    const snapshot = await get(recorridosRef);\n    const data = snapshot.val();\n    if (data) {\n      const recorridos = Object.values(data).filter(r => {\n        const fecha = new Date(r.horaInicio);\n        return fecha >= new Date(startDate) && fecha <= new Date(endDate);\n      });\n\n      // Calcular estadísticas\n      const stats = {\n        totalRecorridos: recorridos.length,\n        recorridosCompletados: recorridos.filter(r => r.estado === 'completado').length,\n        tiempoPromedioViaje: 0,\n        tiempoPromedioTrabajo: 0,\n        trabajadoresActivos: new Set(recorridos.map(r => r.trabajadorId)).size\n      };\n\n      // Calcular tiempos promedio\n      const tiemposViaje = [];\n      const tiemposTrabajo = [];\n      recorridos.forEach(r => {\n        if (r.horaLlegada && r.horaInicio) {\n          const tiempoViaje = new Date(r.horaLlegada) - new Date(r.horaInicio);\n          tiemposViaje.push(tiempoViaje);\n        }\n        if (r.horaFin && r.horaLlegada) {\n          const tiempoTrabajo = new Date(r.horaFin) - new Date(r.horaLlegada);\n          tiemposTrabajo.push(tiempoTrabajo);\n        }\n      });\n      if (tiemposViaje.length > 0) {\n        stats.tiempoPromedioViaje = tiemposViaje.reduce((a, b) => a + b, 0) / tiemposViaje.length;\n      }\n      if (tiemposTrabajo.length > 0) {\n        stats.tiempoPromedioTrabajo = tiemposTrabajo.reduce((a, b) => a + b, 0) / tiemposTrabajo.length;\n      }\n      return stats;\n    }\n    return null;\n  }\n};\n\n// ========== SERVICIO DE LIMPIEZA AUTOMÁTICA ==========\n\nexport const maintenanceService = {\n  // Limpiar datos antiguos (ejecutar periódicamente)\n  cleanOldData: async () => {\n    try {\n      // Limpiar historial de ubicaciones de más de 7 días\n      await trabajadoresService.cleanOldLocationHistory();\n\n      // Limpiar notificaciones leídas de más de 30 días\n      const notificacionesRef = ref(database, 'notificaciones');\n      const snapshot = await get(notificacionesRef);\n      const data = snapshot.val();\n      if (data) {\n        const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n        for (const [id, notif] of Object.entries(data)) {\n          if (notif.leido && new Date(notif.timestamp) < thirtyDaysAgo) {\n            await notificacionesService.deleteNotification(id);\n          }\n        }\n      }\n      console.log('✅ Limpieza de datos antiguos completada');\n    } catch (error) {\n      console.error('❌ Error en limpieza de datos:', error);\n    }\n  }\n};","map":{"version":3,"names":["database","ref","set","onValue","push","update","remove","vehiculosService","subscribeToVehiculos","callback","vehiculosRef","unsubscribe","snapshot","data","val","vehiculosArray","Object","entries","map","id","vehiculo","updateVehiculoPosition","vehiculoId","position","vehiculoRef","lat","lng","ultimaActualizacion","Date","toISOString","updateVehiculoEstado","estado","additionalData","createVehiculo","vehiculoData","newVehiculoRef","createdAt","key","zonasService","subscribeToZonas","zonasRef","zonasArray","zona","updateZonaProgreso","zonaId","progreso","zonaRef","updateZonaEstado","createZona","zonaData","newZonaRef","deleteZona","trabajadoresService","subscribeToTrabajadores","trabajadoresRef","trabajadoresArray","trabajador","createOrUpdateTrabajador","trabajadorId","trabajadorRef","updateTrabajadorData","updateTrabajadorLocation","location","ubicacionRef","timestamp","historialRef","now","console","log","error","getTrabajadorById","startRecorrido","recorridoId","recorridoRef","recorridoData","zonaNombre","nombre","zonaLat","zonaLng","horaInicio","zonaDestino","recorridoActual","markArrival","horaLlegada","finishWork","horaFin","getRecorridosHistory","recorridosRef","recorridos","filter","recorrido","sort","a","b","getAllRecorridos","cleanOldLocationHistory","get","sevenDaysAgo","parseInt","oldRef","notificacionesService","sendNotification","notificationData","notificacionesRef","newNotifRef","leido","subscribeToNotifications","userId","notificaciones","notif","destinatario","markAsRead","notificationId","notifRef","deleteNotification","clearUserNotifications","toDelete","reportesService","saveDailyReport","reportData","fecha","split","reportRef","getReportByDate","getMonthlyReports","year","month","reportesRef","monthReports","reportYear","reportMonth","toString","padStart","report","getRealtimeStats","refs","vehiculos","zonas","trabajadores","stats","total","activos","enMantenimiento","activas","completadas","enRuta","trabajando","disponibles","values","length","v","z","t","generateProductivityReport","startDate","endDate","r","totalRecorridos","recorridosCompletados","tiempoPromedioViaje","tiempoPromedioTrabajo","trabajadoresActivos","Set","size","tiemposViaje","tiemposTrabajo","forEach","tiempoViaje","tiempoTrabajo","reduce","maintenanceService","cleanOldData","thirtyDaysAgo"],"sources":["C:/Users/Izan/Desktop/AppReact/mapa-quillon/src/services/firebaseservices.js"],"sourcesContent":["// src/services/firebaseservices.js\r\nimport { database } from '../config/firebase';\r\nimport { ref, set, onValue, push, update, remove } from 'firebase/database';\r\n\r\n// ========== SERVICIOS PARA VEHÍCULOS ==========\r\n\r\nexport const vehiculosService = {\r\n  // Escuchar cambios en tiempo real de vehículos\r\n  subscribeToVehiculos: (callback) => {\r\n    const vehiculosRef = ref(database, 'vehiculos');\r\n    const unsubscribe = onValue(vehiculosRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const vehiculosArray = Object.entries(data).map(([id, vehiculo]) => ({\r\n          id,\r\n          ...vehiculo\r\n        }));\r\n        callback(vehiculosArray);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Actualizar posición de vehículo\r\n  updateVehiculoPosition: async (vehiculoId, position) => {\r\n    const vehiculoRef = ref(database, `vehiculos/${vehiculoId}`);\r\n    await update(vehiculoRef, {\r\n      lat: position.lat,\r\n      lng: position.lng,\r\n      ultimaActualizacion: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Actualizar estado de vehículo\r\n  updateVehiculoEstado: async (vehiculoId, estado, additionalData = {}) => {\r\n    const vehiculoRef = ref(database, `vehiculos/${vehiculoId}`);\r\n    await update(vehiculoRef, {\r\n      estado,\r\n      ...additionalData,\r\n      ultimaActualizacion: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Crear nuevo vehículo\r\n  createVehiculo: async (vehiculoData) => {\r\n    const vehiculosRef = ref(database, 'vehiculos');\r\n    const newVehiculoRef = push(vehiculosRef);\r\n    await set(newVehiculoRef, {\r\n      ...vehiculoData,\r\n      createdAt: new Date().toISOString()\r\n    });\r\n    return newVehiculoRef.key;\r\n  }\r\n};\r\n\r\n// ========== SERVICIOS PARA ZONAS ==========\r\n\r\nexport const zonasService = {\r\n  // Escuchar cambios en tiempo real de zonas\r\n  subscribeToZonas: (callback) => {\r\n    const zonasRef = ref(database, 'zonas');\r\n    const unsubscribe = onValue(zonasRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const zonasArray = Object.entries(data).map(([id, zona]) => ({\r\n          id,\r\n          ...zona\r\n        }));\r\n        callback(zonasArray);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Actualizar progreso de zona\r\n  updateZonaProgreso: async (zonaId, progreso) => {\r\n    const zonaRef = ref(database, `zonas/${zonaId}`);\r\n    await update(zonaRef, {\r\n      progreso,\r\n      estado: progreso === 100 ? 'completada' : 'activa',\r\n      ultimaActualizacion: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Actualizar estado de zona\r\n  updateZonaEstado: async (zonaId, estado, additionalData = {}) => {\r\n    const zonaRef = ref(database, `zonas/${zonaId}`);\r\n    await update(zonaRef, {\r\n      estado,\r\n      ...additionalData,\r\n      ultimaActualizacion: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Crear nueva zona\r\n  createZona: async (zonaData) => {\r\n    const zonasRef = ref(database, 'zonas');\r\n    const newZonaRef = push(zonasRef);\r\n    await set(newZonaRef, {\r\n      ...zonaData,\r\n      createdAt: new Date().toISOString()\r\n    });\r\n    return newZonaRef.key;\r\n  },\r\n\r\n  // Eliminar zona\r\n  deleteZona: async (zonaId) => {\r\n    const zonaRef = ref(database, `zonas/${zonaId}`);\r\n    await remove(zonaRef);\r\n  }\r\n};\r\n\r\n// ========== SERVICIOS PARA TRABAJADORES ==========\r\n\r\nexport const trabajadoresService = {\r\n  // Escuchar cambios en tiempo real de trabajadores\r\n  subscribeToTrabajadores: (callback) => {\r\n    const trabajadoresRef = ref(database, 'trabajadores');\r\n    const unsubscribe = onValue(trabajadoresRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const trabajadoresArray = Object.entries(data).map(([id, trabajador]) => ({\r\n          id,\r\n          ...trabajador\r\n        }));\r\n        callback(trabajadoresArray);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Crear o actualizar trabajador (función para registro inicial)\r\n  createOrUpdateTrabajador: async (trabajadorId, data) => {\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\r\n    await set(trabajadorRef, {\r\n      ...data,\r\n      ultimaActualizacion: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Actualizar datos generales del trabajador\r\n  updateTrabajadorData: async (trabajadorId, data) => {\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\r\n    await update(trabajadorRef, {\r\n      ...data,\r\n      ultimaActualizacion: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Actualizar ubicación GPS del trabajador con historial\r\n  updateTrabajadorLocation: async (trabajadorId, location) => {\r\n    try {\r\n      // Actualizar ubicación actual\r\n      const ubicacionRef = ref(database, `trabajadores/${trabajadorId}/ubicacion`);\r\n      await set(ubicacionRef, {\r\n        lat: location.lat,\r\n        lng: location.lng,\r\n        timestamp: location.timestamp || new Date().toISOString()\r\n      });\r\n      \r\n      // Guardar en historial de ubicaciones (opcional - útil para tracking)\r\n      const historialRef = ref(database, `historial_ubicaciones/${trabajadorId}/${Date.now()}`);\r\n      await set(historialRef, {\r\n        lat: location.lat,\r\n        lng: location.lng,\r\n        timestamp: location.timestamp || new Date().toISOString()\r\n      });\r\n\r\n      console.log('✅ Ubicación actualizada en Firebase');\r\n    } catch (error) {\r\n      console.error('❌ Error al actualizar ubicación:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener trabajador por ID\r\n  getTrabajadorById: (trabajadorId, callback) => {\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\r\n    const unsubscribe = onValue(trabajadorRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      callback(data ? { id: trabajadorId, ...data } : null);\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Iniciar recorrido\r\n  startRecorrido: async (trabajadorId, zonaData) => {\r\n    const recorridoId = `${trabajadorId}_${Date.now()}`;\r\n    const recorridoRef = ref(database, `recorridos/${recorridoId}`);\r\n    const recorridoData = {\r\n      trabajadorId,\r\n      zonaId: zonaData.id,\r\n      zonaNombre: zonaData.nombre,\r\n      zonaLat: zonaData.lat,\r\n      zonaLng: zonaData.lng,\r\n      horaInicio: new Date().toISOString(),\r\n      estado: 'en_camino'\r\n    };\r\n    \r\n    await set(recorridoRef, recorridoData);\r\n    \r\n    // Actualizar estado del trabajador\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\r\n    await update(trabajadorRef, {\r\n      estado: 'en_camino',\r\n      zonaDestino: zonaData.nombre,\r\n      recorridoActual: recorridoId\r\n    });\r\n    \r\n    return recorridoId;\r\n  },\r\n\r\n  // Marcar llegada a zona\r\n  markArrival: async (recorridoId, trabajadorId) => {\r\n    const recorridoRef = ref(database, `recorridos/${recorridoId}`);\r\n    await update(recorridoRef, {\r\n      horaLlegada: new Date().toISOString(),\r\n      estado: 'trabajando'\r\n    });\r\n\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\r\n    await update(trabajadorRef, {\r\n      estado: 'trabajando',\r\n      horaLlegada: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Finalizar trabajo\r\n  finishWork: async (recorridoId, trabajadorId) => {\r\n    const recorridoRef = ref(database, `recorridos/${recorridoId}`);\r\n    await update(recorridoRef, {\r\n      horaFin: new Date().toISOString(),\r\n      estado: 'completado'\r\n    });\r\n\r\n    const trabajadorRef = ref(database, `trabajadores/${trabajadorId}`);\r\n    await update(trabajadorRef, {\r\n      estado: 'disponible',\r\n      zonaDestino: null,\r\n      recorridoActual: null\r\n    });\r\n  },\r\n\r\n  // Obtener historial de recorridos\r\n  getRecorridosHistory: (trabajadorId, callback) => {\r\n    const recorridosRef = ref(database, 'recorridos');\r\n    const unsubscribe = onValue(recorridosRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const recorridos = Object.entries(data)\r\n          .filter(([id, recorrido]) => recorrido.trabajadorId === trabajadorId)\r\n          .map(([id, recorrido]) => ({ id, ...recorrido }))\r\n          .sort((a, b) => new Date(b.horaInicio) - new Date(a.horaInicio));\r\n        callback(recorridos);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Obtener todos los recorridos\r\n  getAllRecorridos: (callback) => {\r\n    const recorridosRef = ref(database, 'recorridos');\r\n    const unsubscribe = onValue(recorridosRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const recorridos = Object.entries(data)\r\n          .map(([id, recorrido]) => ({ id, ...recorrido }))\r\n          .sort((a, b) => new Date(b.horaInicio) - new Date(a.horaInicio));\r\n        callback(recorridos);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Limpiar historial de ubicaciones antiguas (más de 7 días)\r\n  cleanOldLocationHistory: async () => {\r\n    const historialRef = ref(database, 'historial_ubicaciones');\r\n    const snapshot = await get(historialRef);\r\n    const data = snapshot.val();\r\n    \r\n    if (data) {\r\n      const sevenDaysAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);\r\n      \r\n      for (const trabajadorId in data) {\r\n        for (const timestamp in data[trabajadorId]) {\r\n          if (parseInt(timestamp) < sevenDaysAgo) {\r\n            const oldRef = ref(database, `historial_ubicaciones/${trabajadorId}/${timestamp}`);\r\n            await remove(oldRef);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// ========== SERVICIOS DE NOTIFICACIONES ==========\r\n\r\nexport const notificacionesService = {\r\n  // Enviar notificación\r\n  sendNotification: async (notificationData) => {\r\n    const notificacionesRef = ref(database, 'notificaciones');\r\n    const newNotifRef = push(notificacionesRef);\r\n    await set(newNotifRef, {\r\n      ...notificationData,\r\n      timestamp: new Date().toISOString(),\r\n      leido: false\r\n    });\r\n    return newNotifRef.key;\r\n  },\r\n\r\n  // Escuchar notificaciones para un usuario\r\n  subscribeToNotifications: (userId, callback) => {\r\n    const notificacionesRef = ref(database, 'notificaciones');\r\n    const unsubscribe = onValue(notificacionesRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const notificaciones = Object.entries(data)\r\n          .filter(([id, notif]) => notif.destinatario === userId)\r\n          .map(([id, notif]) => ({ id, ...notif }))\r\n          .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n        callback(notificaciones);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Marcar notificación como leída\r\n  markAsRead: async (notificationId) => {\r\n    const notifRef = ref(database, `notificaciones/${notificationId}`);\r\n    await update(notifRef, { leido: true });\r\n  },\r\n\r\n  // Eliminar notificación\r\n  deleteNotification: async (notificationId) => {\r\n    const notifRef = ref(database, `notificaciones/${notificationId}`);\r\n    await remove(notifRef);\r\n  },\r\n\r\n  // Eliminar todas las notificaciones de un usuario\r\n  clearUserNotifications: async (userId) => {\r\n    const notificacionesRef = ref(database, 'notificaciones');\r\n    const snapshot = await get(notificacionesRef);\r\n    const data = snapshot.val();\r\n    \r\n    if (data) {\r\n      const toDelete = Object.entries(data)\r\n        .filter(([id, notif]) => notif.destinatario === userId)\r\n        .map(([id]) => id);\r\n      \r\n      for (const id of toDelete) {\r\n        await deleteNotification(id);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// ========== SERVICIOS DE REPORTES ==========\r\n\r\nexport const reportesService = {\r\n  // Guardar reporte diario\r\n  saveDailyReport: async (reportData) => {\r\n    const fecha = new Date().toISOString().split('T')[0];\r\n    const reportRef = ref(database, `reportes/diarios/${fecha}`);\r\n    await set(reportRef, {\r\n      ...reportData,\r\n      fecha,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  },\r\n\r\n  // Obtener reporte por fecha\r\n  getReportByDate: (fecha, callback) => {\r\n    const reportRef = ref(database, `reportes/diarios/${fecha}`);\r\n    const unsubscribe = onValue(reportRef, (snapshot) => {\r\n      callback(snapshot.val());\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Obtener reportes del mes\r\n  getMonthlyReports: (year, month, callback) => {\r\n    const reportesRef = ref(database, 'reportes/diarios');\r\n    const unsubscribe = onValue(reportesRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const monthReports = Object.entries(data)\r\n          .filter(([fecha]) => {\r\n            const [reportYear, reportMonth] = fecha.split('-');\r\n            return reportYear === year.toString() && reportMonth === month.toString().padStart(2, '0');\r\n          })\r\n          .map(([fecha, report]) => ({ fecha, ...report }));\r\n        callback(monthReports);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  },\r\n\r\n  // Obtener estadísticas en tiempo real\r\n  getRealtimeStats: (callback) => {\r\n    const refs = {\r\n      vehiculos: ref(database, 'vehiculos'),\r\n      zonas: ref(database, 'zonas'),\r\n      trabajadores: ref(database, 'trabajadores')\r\n    };\r\n\r\n    const stats = {\r\n      vehiculos: { total: 0, activos: 0, enMantenimiento: 0 },\r\n      zonas: { total: 0, activas: 0, completadas: 0 },\r\n      trabajadores: { total: 0, enRuta: 0, trabajando: 0, disponibles: 0 }\r\n    };\r\n\r\n    // Escuchar vehículos\r\n    onValue(refs.vehiculos, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const vehiculos = Object.values(data);\r\n        stats.vehiculos.total = vehiculos.length;\r\n        stats.vehiculos.activos = vehiculos.filter(v => \r\n          v.estado === 'activo' || v.estado === 'en_ruta' || v.estado === 'trabajando'\r\n        ).length;\r\n        stats.vehiculos.enMantenimiento = vehiculos.filter(v => \r\n          v.estado === 'mantenimiento'\r\n        ).length;\r\n      }\r\n      callback({ ...stats });\r\n    });\r\n\r\n    // Escuchar zonas\r\n    onValue(refs.zonas, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const zonas = Object.values(data);\r\n        stats.zonas.total = zonas.length;\r\n        stats.zonas.activas = zonas.filter(z => z.estado === 'activa').length;\r\n        stats.zonas.completadas = zonas.filter(z => z.estado === 'completada').length;\r\n      }\r\n      callback({ ...stats });\r\n    });\r\n\r\n    // Escuchar trabajadores\r\n    onValue(refs.trabajadores, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const trabajadores = Object.values(data);\r\n        stats.trabajadores.total = trabajadores.length;\r\n        stats.trabajadores.enRuta = trabajadores.filter(t => t.estado === 'en_camino').length;\r\n        stats.trabajadores.trabajando = trabajadores.filter(t => t.estado === 'trabajando').length;\r\n        stats.trabajadores.disponibles = trabajadores.filter(t => t.estado === 'disponible').length;\r\n      }\r\n      callback({ ...stats });\r\n    });\r\n  },\r\n\r\n  // Generar reporte de productividad\r\n  generateProductivityReport: async (startDate, endDate) => {\r\n    const recorridosRef = ref(database, 'recorridos');\r\n    const snapshot = await get(recorridosRef);\r\n    const data = snapshot.val();\r\n    \r\n    if (data) {\r\n      const recorridos = Object.values(data).filter(r => {\r\n        const fecha = new Date(r.horaInicio);\r\n        return fecha >= new Date(startDate) && fecha <= new Date(endDate);\r\n      });\r\n      \r\n      // Calcular estadísticas\r\n      const stats = {\r\n        totalRecorridos: recorridos.length,\r\n        recorridosCompletados: recorridos.filter(r => r.estado === 'completado').length,\r\n        tiempoPromedioViaje: 0,\r\n        tiempoPromedioTrabajo: 0,\r\n        trabajadoresActivos: new Set(recorridos.map(r => r.trabajadorId)).size\r\n      };\r\n      \r\n      // Calcular tiempos promedio\r\n      const tiemposViaje = [];\r\n      const tiemposTrabajo = [];\r\n      \r\n      recorridos.forEach(r => {\r\n        if (r.horaLlegada && r.horaInicio) {\r\n          const tiempoViaje = new Date(r.horaLlegada) - new Date(r.horaInicio);\r\n          tiemposViaje.push(tiempoViaje);\r\n        }\r\n        if (r.horaFin && r.horaLlegada) {\r\n          const tiempoTrabajo = new Date(r.horaFin) - new Date(r.horaLlegada);\r\n          tiemposTrabajo.push(tiempoTrabajo);\r\n        }\r\n      });\r\n      \r\n      if (tiemposViaje.length > 0) {\r\n        stats.tiempoPromedioViaje = tiemposViaje.reduce((a, b) => a + b, 0) / tiemposViaje.length;\r\n      }\r\n      if (tiemposTrabajo.length > 0) {\r\n        stats.tiempoPromedioTrabajo = tiemposTrabajo.reduce((a, b) => a + b, 0) / tiemposTrabajo.length;\r\n      }\r\n      \r\n      return stats;\r\n    }\r\n    \r\n    return null;\r\n  }\r\n};\r\n\r\n// ========== SERVICIO DE LIMPIEZA AUTOMÁTICA ==========\r\n\r\nexport const maintenanceService = {\r\n  // Limpiar datos antiguos (ejecutar periódicamente)\r\n  cleanOldData: async () => {\r\n    try {\r\n      // Limpiar historial de ubicaciones de más de 7 días\r\n      await trabajadoresService.cleanOldLocationHistory();\r\n      \r\n      // Limpiar notificaciones leídas de más de 30 días\r\n      const notificacionesRef = ref(database, 'notificaciones');\r\n      const snapshot = await get(notificacionesRef);\r\n      const data = snapshot.val();\r\n      \r\n      if (data) {\r\n        const thirtyDaysAgo = new Date(Date.now() - (30 * 24 * 60 * 60 * 1000));\r\n        \r\n        for (const [id, notif] of Object.entries(data)) {\r\n          if (notif.leido && new Date(notif.timestamp) < thirtyDaysAgo) {\r\n            await notificacionesService.deleteNotification(id);\r\n          }\r\n        }\r\n      }\r\n      \r\n      console.log('✅ Limpieza de datos antiguos completada');\r\n    } catch (error) {\r\n      console.error('❌ Error en limpieza de datos:', error);\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}